@page "/callback-sample2"
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable
@inject IHttpClientFactory _clientFactory

<h1>Callbacks</h1>
<hr />
<p>
    The server at <span style="color:chocolate">@_apiRoot</span> must be running.
</p>
<h3>@clock</h3>
<div>
    <button class="btn btn-primary sm w-25" @onclick="StartAsync">Start</button>
    <button class="btn btn-primary sm w-25" @onclick="Clear">Clear</button>
</div>
<hr />
<pre>@echo</pre>

@code {
    string echo = string.Empty;
    string clock = "00:00:00";

    Timer? _timer;

    HubConnection? _hubConnection;
    string _name = $"Blazor-{Random.Shared.Next(100, 900):000}";

    HttpClient? _client;
    string? _apiRoot;
    bool _connected;

    protected override async Task OnInitializedAsync()
    {
        echo = "Try C++ Callback\n";
        ActivateClock();

        _client = _clientFactory.CreateClient("SampleServer");

        _apiRoot = _client.BaseAddress?.ToString();

        _hubConnection = new HubConnectionBuilder()
          .WithUrl(_apiRoot + "Transmitter")
          .Build();

        _hubConnection.On<string, int>("Broadcast", async (name, number) => {
            echo += $"{name} Receiving from the server: {number}\n";
            //
            await InvokeAsync(StateHasChanged);
        });

        try {
            await _hubConnection.StartAsync();
            _connected = _hubConnection.State == HubConnectionState.Connected;
        }
        catch(Exception exception) {
            echo = "Exception: " + exception.Message;
        }
    }

    void ActivateClock()
    {
         // To show that the main thread is not interrupted
        _timer = new Timer(async _ => {
            clock = DateTime.UtcNow.ToString("HH:mm:ss");
            await InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    async Task StartAsync()
    {
        if(_client is null || _connected == false) {
            echo = "Server is not ready.";
            return;
        }
        var rq = $"RunProcess/{_name}/20";
        var result = await _client.GetStringAsync(rq);

        echo += $"Result: {result}";
    }

    void Clear()
    {
        echo = string.Empty;
    }

    public async ValueTask DisposeAsync()
    {
        if(_hubConnection is not null) await _hubConnection.DisposeAsync();
        if(_timer is not null) _timer.Dispose();
    }
}