@page "/struct-sample"
@using System.Text

<h1>Native Dependencies - Experiments</h1>
<hr />
<p>Look at the console output in browser development tools</p>
<pre>@echo</pre>

@code {
    record struct XY(int x, int y);

    //[StructLayout(LayoutKind.Sequential)]
    //struct XY
    //{
    //    public int x { get; set; }
    //    public int y { get; set; }
    //}

    //[DllImport("StructSample")] static extern XY get_xy();
    [DllImport("StructSample")] 
    // *** [return : MarshalAs(UnmanagedType.LPStruct)]
    static extern XY get_xy();
    // *** static extern IntPtr get_xy();

    [DllImport("StructSample")] static extern int sum_xy(XY p);

    string echo = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        Echo("Calling C++ Struct Sample");
        await Task.Delay(500);

        var xy = new XY { x = 15, y = 23 };

        var sum = sum_xy(xy);

        Echo("Function passing a structure as parameter:");
        Echo(string.Format("x: {0} y: {1}\n", xy.x, xy.y));
        Echo(string.Format("Sum: {0}", sum));

        // fails here
        var xyCpp = get_xy();

        Echo("\nGetting a structure from C++ Library");
        Echo(string.Format("xyCpp: {0}", xyCpp));

        // ***
        //var lexx = Marshal.PtrToStructure<XY>(xyCpp);

        // Echo(string.Format("lexx: {0}", lexx));
        // Echo(string.Format("lexx.x: {0}", lexx.x));
    }

    void Echo(string? message = null)
    {
        if (message is null)
            echo = string.Empty;
        else {
            echo += $"{message}\n";
            StateHasChanged();
        }
    }
}