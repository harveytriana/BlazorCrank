@page "/callback-sample"
@using System.Runtime.InteropServices
@implements IDisposable

<h1>Native Dependencies - Callbacks</h1>
<hr />
<p>Look at the console output in browser development tools</p>
<h3>@clock</h3>
<div>
    <button @onclick="Start">Start</button>
</div>
<hr />
<pre>@echo</pre>

@code {
    string echo = string.Empty;
    string clock = "00:00:00";

    Timer? timer;

    protected override async Task OnInitializedAsync()
    {
        await Echo("Try C++ Callback.");
        CallbackExperiment.Echo += Echo;

        timer = new Timer(async _ => {
            clock = DateTime.UtcNow.ToString("HH:mm:ss");
            await InvokeAsync(StateHasChanged);
        }, null, 0, 1000);
    }

    void Start()
    {
        Task.Run(() => {
            CallbackExperiment.Run(8, 300);
        });
    }

    async Task Echo(string? message = null)
    {
        Console.WriteLine("Echo: {0}", message);

        if (message is null)
            echo = string.Empty;
        else {
            echo += $"{message}\n";
            // FIXME: Does not update UI immediately
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Dispose()
    {
        CallbackExperiment.Echo -= Echo;
        timer?.Dispose();
    }
}